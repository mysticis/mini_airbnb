// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: rooms.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
  owner_id, 
  home_type, 
  home_size, 
  furnished, 
  private_bathroom,
  balcony,
  garden,
  kitchen,
  pets_allowed,
  parking,
  wheelchair_accessible,
  basement,
  amenities,
  suitable_for,
  price,
  longitude,
  latitude 
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17
)
RETURNING id, owner_id, home_type, home_size, furnished, private_bathroom, balcony, garden, kitchen, pets_allowed, parking, wheelchair_accessible, basement, amenities, suitable_for, published_at, price, created_at, updated_at, longitude, latitude
`

type CreateRoomParams struct {
	OwnerID              int32    `json:"owner_id"`
	HomeType             []string `json:"home_type"`
	HomeSize             HomeSize `json:"home_size"`
	Furnished            bool     `json:"furnished"`
	PrivateBathroom      bool     `json:"private_bathroom"`
	Balcony              bool     `json:"balcony"`
	Garden               bool     `json:"garden"`
	Kitchen              bool     `json:"kitchen"`
	PetsAllowed          bool     `json:"pets_allowed"`
	Parking              bool     `json:"parking"`
	WheelchairAccessible bool     `json:"wheelchair_accessible"`
	Basement             bool     `json:"basement"`
	Amenities            []string `json:"amenities"`
	SuitableFor          []string `json:"suitable_for"`
	Price                float64  `json:"price"`
	Longitude            float64  `json:"longitude"`
	Latitude             float64  `json:"latitude"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.OwnerID,
		pq.Array(arg.HomeType),
		arg.HomeSize,
		arg.Furnished,
		arg.PrivateBathroom,
		arg.Balcony,
		arg.Garden,
		arg.Kitchen,
		arg.PetsAllowed,
		arg.Parking,
		arg.WheelchairAccessible,
		arg.Basement,
		pq.Array(arg.Amenities),
		pq.Array(arg.SuitableFor),
		arg.Price,
		arg.Longitude,
		arg.Latitude,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		pq.Array(&i.HomeType),
		&i.HomeSize,
		&i.Furnished,
		&i.PrivateBathroom,
		&i.Balcony,
		&i.Garden,
		&i.Kitchen,
		&i.PetsAllowed,
		&i.Parking,
		&i.WheelchairAccessible,
		&i.Basement,
		pq.Array(&i.Amenities),
		pq.Array(&i.SuitableFor),
		&i.PublishedAt,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Longitude,
		&i.Latitude,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms
WHERE owner_id = $2 AND id = $1
`

type DeleteRoomParams struct {
	ID      int32 `json:"id"`
	OwnerID int32 `json:"owner_id"`
}

func (q *Queries) DeleteRoom(ctx context.Context, arg DeleteRoomParams) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, arg.ID, arg.OwnerID)
	return err
}

const getRoomByOwner = `-- name: GetRoomByOwner :one
SELECT id, owner_id, home_type, home_size, furnished, private_bathroom, balcony, garden, kitchen, pets_allowed, parking, wheelchair_accessible, basement, amenities, suitable_for, published_at, price, created_at, updated_at, longitude, latitude FROM rooms
WHERE owner_id = $2 AND id = $1 LIMIT 1
`

type GetRoomByOwnerParams struct {
	ID      int32 `json:"id"`
	OwnerID int32 `json:"owner_id"`
}

func (q *Queries) GetRoomByOwner(ctx context.Context, arg GetRoomByOwnerParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomByOwner, arg.ID, arg.OwnerID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		pq.Array(&i.HomeType),
		&i.HomeSize,
		&i.Furnished,
		&i.PrivateBathroom,
		&i.Balcony,
		&i.Garden,
		&i.Kitchen,
		&i.PetsAllowed,
		&i.Parking,
		&i.WheelchairAccessible,
		&i.Basement,
		pq.Array(&i.Amenities),
		pq.Array(&i.SuitableFor),
		&i.PublishedAt,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Longitude,
		&i.Latitude,
	)
	return i, err
}

const listAllRooms = `-- name: ListAllRooms :many
SELECT id, owner_id, home_type, home_size, furnished, private_bathroom, balcony, garden, kitchen, pets_allowed, parking, wheelchair_accessible, basement, amenities, suitable_for, published_at, price, created_at, updated_at, longitude, latitude FROM rooms
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAllRoomsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllRooms(ctx context.Context, arg ListAllRoomsParams) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listAllRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			pq.Array(&i.HomeType),
			&i.HomeSize,
			&i.Furnished,
			&i.PrivateBathroom,
			&i.Balcony,
			&i.Garden,
			&i.Kitchen,
			&i.PetsAllowed,
			&i.Parking,
			&i.WheelchairAccessible,
			&i.Basement,
			pq.Array(&i.Amenities),
			pq.Array(&i.SuitableFor),
			&i.PublishedAt,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Longitude,
			&i.Latitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoomsByOwner = `-- name: ListRoomsByOwner :many
SELECT id, owner_id, home_type, home_size, furnished, private_bathroom, balcony, garden, kitchen, pets_allowed, parking, wheelchair_accessible, basement, amenities, suitable_for, published_at, price, created_at, updated_at, longitude, latitude FROM rooms
WHERE owner_id = $1
ORDER BY id
`

func (q *Queries) ListRoomsByOwner(ctx context.Context, ownerID int32) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listRoomsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			pq.Array(&i.HomeType),
			&i.HomeSize,
			&i.Furnished,
			&i.PrivateBathroom,
			&i.Balcony,
			&i.Garden,
			&i.Kitchen,
			&i.PetsAllowed,
			&i.Parking,
			&i.WheelchairAccessible,
			&i.Basement,
			pq.Array(&i.Amenities),
			pq.Array(&i.SuitableFor),
			&i.PublishedAt,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Longitude,
			&i.Latitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms
set home_type = $3,
 home_size = $4, 
  furnished = $5, 
  private_bathroom = $6,
  balcony = $7,
  garden = $8,
  kitchen = $9,
  pets_allowed = $10,
  parking = $11,
  wheelchair_accessible = $12,
  basement = $13,
  amenities = $14,
  suitable_for = $15,
  price = $16,
  longitude = $17,
  latitude = $18
WHERE owner_id = $2 AND id = $1
RETURNING id, owner_id, home_type, home_size, furnished, private_bathroom, balcony, garden, kitchen, pets_allowed, parking, wheelchair_accessible, basement, amenities, suitable_for, published_at, price, created_at, updated_at, longitude, latitude
`

type UpdateRoomParams struct {
	ID                   int32    `json:"id"`
	OwnerID              int32    `json:"owner_id"`
	HomeType             []string `json:"home_type"`
	HomeSize             HomeSize `json:"home_size"`
	Furnished            bool     `json:"furnished"`
	PrivateBathroom      bool     `json:"private_bathroom"`
	Balcony              bool     `json:"balcony"`
	Garden               bool     `json:"garden"`
	Kitchen              bool     `json:"kitchen"`
	PetsAllowed          bool     `json:"pets_allowed"`
	Parking              bool     `json:"parking"`
	WheelchairAccessible bool     `json:"wheelchair_accessible"`
	Basement             bool     `json:"basement"`
	Amenities            []string `json:"amenities"`
	SuitableFor          []string `json:"suitable_for"`
	Price                float64  `json:"price"`
	Longitude            float64  `json:"longitude"`
	Latitude             float64  `json:"latitude"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, updateRoom,
		arg.ID,
		arg.OwnerID,
		pq.Array(arg.HomeType),
		arg.HomeSize,
		arg.Furnished,
		arg.PrivateBathroom,
		arg.Balcony,
		arg.Garden,
		arg.Kitchen,
		arg.PetsAllowed,
		arg.Parking,
		arg.WheelchairAccessible,
		arg.Basement,
		pq.Array(arg.Amenities),
		pq.Array(arg.SuitableFor),
		arg.Price,
		arg.Longitude,
		arg.Latitude,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		pq.Array(&i.HomeType),
		&i.HomeSize,
		&i.Furnished,
		&i.PrivateBathroom,
		&i.Balcony,
		&i.Garden,
		&i.Kitchen,
		&i.PetsAllowed,
		&i.Parking,
		&i.WheelchairAccessible,
		&i.Basement,
		pq.Array(&i.Amenities),
		pq.Array(&i.SuitableFor),
		&i.PublishedAt,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Longitude,
		&i.Latitude,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reservations.sql

package db

import (
	"context"
	"time"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservations (
 tenant_id, room_id, start_date, end_date, price, total
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, tenant_id, room_id, start_date, end_date, price, total, created_at, updated_at
`

type CreateReservationParams struct {
	TenantID  int32     `json:"tenant_id"`
	RoomID    int32     `json:"room_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Price     float64   `json:"price"`
	Total     float64   `json:"total"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, createReservation,
		arg.TenantID,
		arg.RoomID,
		arg.StartDate,
		arg.EndDate,
		arg.Price,
		arg.Total,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.RoomID,
		&i.StartDate,
		&i.EndDate,
		&i.Price,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations
WHERE tenant_id = $2 AND id = $1
`

type DeleteReservationParams struct {
	ID       int32 `json:"id"`
	TenantID int32 `json:"tenant_id"`
}

func (q *Queries) DeleteReservation(ctx context.Context, arg DeleteReservationParams) error {
	_, err := q.db.ExecContext(ctx, deleteReservation, arg.ID, arg.TenantID)
	return err
}

const getReservation = `-- name: GetReservation :one
SELECT id, tenant_id, room_id, start_date, end_date, price, total, created_at, updated_at FROM reservations
WHERE tenant_id = $1 LIMIT 1
`

func (q *Queries) GetReservation(ctx context.Context, tenantID int32) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservation, tenantID)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.RoomID,
		&i.StartDate,
		&i.EndDate,
		&i.Price,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listReservations = `-- name: ListReservations :many
SELECT id, tenant_id, room_id, start_date, end_date, price, total, created_at, updated_at FROM reservations
ORDER BY tenant_id
`

func (q *Queries) ListReservations(ctx context.Context) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, listReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reservation{}
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.RoomID,
			&i.StartDate,
			&i.EndDate,
			&i.Price,
			&i.Total,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :one
UPDATE reservations
set room_id = $3,
start_date = $4,
end_date = $5,
price = $6,
total = $7
WHERE tenant_id = $2 AND id = $1
RETURNING id, tenant_id, room_id, start_date, end_date, price, total, created_at, updated_at
`

type UpdateReservationParams struct {
	ID        int32     `json:"id"`
	TenantID  int32     `json:"tenant_id"`
	RoomID    int32     `json:"room_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Price     float64   `json:"price"`
	Total     float64   `json:"total"`
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, updateReservation,
		arg.ID,
		arg.TenantID,
		arg.RoomID,
		arg.StartDate,
		arg.EndDate,
		arg.Price,
		arg.Total,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.RoomID,
		&i.StartDate,
		&i.EndDate,
		&i.Price,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

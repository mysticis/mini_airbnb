// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reviews.sql

package db

import (
	"context"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
  user_id, room_id, comment, rating
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, room_id, comment, rating, created_at
`

type CreateReviewParams struct {
	UserID  int32  `json:"user_id"`
	RoomID  int32  `json:"room_id"`
	Comment string `json:"comment"`
	Rating  int32  `json:"rating"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.UserID,
		arg.RoomID,
		arg.Comment,
		arg.Rating,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.Comment,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE user_id = $2 AND room_id = $1
`

type DeleteReviewParams struct {
	RoomID int32 `json:"room_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteReview(ctx context.Context, arg DeleteReviewParams) error {
	_, err := q.db.ExecContext(ctx, deleteReview, arg.RoomID, arg.UserID)
	return err
}

const getRoomReview = `-- name: GetRoomReview :one
SELECT id, user_id, room_id, comment, rating, created_at FROM reviews
WHERE room_id = $2  AND user_id = $1 LIMIT 1
`

type GetRoomReviewParams struct {
	UserID int32 `json:"user_id"`
	RoomID int32 `json:"room_id"`
}

func (q *Queries) GetRoomReview(ctx context.Context, arg GetRoomReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, getRoomReview, arg.UserID, arg.RoomID)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.Comment,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const listRoomReviews = `-- name: ListRoomReviews :many
SELECT id, user_id, room_id, comment, rating, created_at FROM reviews
WHERE room_id = $1
ORDER BY id
`

func (q *Queries) ListRoomReviews(ctx context.Context, roomID int32) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listRoomReviews, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Review{}
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.Comment,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
set comment = $3,
rating = $4
WHERE room_id = $2 AND user_id = $1
RETURNING id, user_id, room_id, comment, rating, created_at
`

type UpdateReviewParams struct {
	UserID  int32  `json:"user_id"`
	RoomID  int32  `json:"room_id"`
	Comment string `json:"comment"`
	Rating  int32  `json:"rating"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, updateReview,
		arg.UserID,
		arg.RoomID,
		arg.Comment,
		arg.Rating,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.Comment,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

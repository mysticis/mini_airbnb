// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: media.sql

package db

import (
	"context"
)

const createMedia = `-- name: CreateMedia :one
INSERT INTO room_media (
  room_id, room_images
) VALUES (
  $1, $2
)
RETURNING id, room_id, room_images
`

type CreateMediaParams struct {
	RoomID     int32  `json:"room_id"`
	RoomImages string `json:"room_images"`
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (RoomMedium, error) {
	row := q.db.QueryRowContext(ctx, createMedia, arg.RoomID, arg.RoomImages)
	var i RoomMedium
	err := row.Scan(&i.ID, &i.RoomID, &i.RoomImages)
	return i, err
}

const deleteRoomMedia = `-- name: DeleteRoomMedia :exec
DELETE FROM room_media
WHERE room_id = $2 AND id = $1
`

type DeleteRoomMediaParams struct {
	ID     int32 `json:"id"`
	RoomID int32 `json:"room_id"`
}

func (q *Queries) DeleteRoomMedia(ctx context.Context, arg DeleteRoomMediaParams) error {
	_, err := q.db.ExecContext(ctx, deleteRoomMedia, arg.ID, arg.RoomID)
	return err
}

const getRoomMedia = `-- name: GetRoomMedia :one
SELECT id, room_id, room_images FROM room_media
WHERE room_id = $1 LIMIT 1
`

func (q *Queries) GetRoomMedia(ctx context.Context, roomID int32) (RoomMedium, error) {
	row := q.db.QueryRowContext(ctx, getRoomMedia, roomID)
	var i RoomMedium
	err := row.Scan(&i.ID, &i.RoomID, &i.RoomImages)
	return i, err
}

const listRoomsMedia = `-- name: ListRoomsMedia :many
SELECT id, room_id, room_images FROM room_media
WHERE room_id = $1
`

func (q *Queries) ListRoomsMedia(ctx context.Context, roomID int32) ([]RoomMedium, error) {
	rows, err := q.db.QueryContext(ctx, listRoomsMedia, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RoomMedium{}
	for rows.Next() {
		var i RoomMedium
		if err := rows.Scan(&i.ID, &i.RoomID, &i.RoomImages); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoomMedia = `-- name: UpdateRoomMedia :one
UPDATE room_media
set room_images = $3
WHERE room_id = $2 AND id = $1
RETURNING id, room_id, room_images
`

type UpdateRoomMediaParams struct {
	ID         int32  `json:"id"`
	RoomID     int32  `json:"room_id"`
	RoomImages string `json:"room_images"`
}

func (q *Queries) UpdateRoomMedia(ctx context.Context, arg UpdateRoomMediaParams) (RoomMedium, error) {
	row := q.db.QueryRowContext(ctx, updateRoomMedia, arg.ID, arg.RoomID, arg.RoomImages)
	var i RoomMedium
	err := row.Scan(&i.ID, &i.RoomID, &i.RoomImages)
	return i, err
}

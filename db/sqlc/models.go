// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type HomeSize string

const (
	HomeSize15mSquaredOrMore HomeSize = "15m_squared_or_more"
	HomeSize30mSquaredOrMore HomeSize = "30m_squared_or_more"
	HomeSize60mSquaredOrMore HomeSize = "60m_squared_or_more"
	HomeSize90mSquaredOrMore HomeSize = "90m_squared_or_more"
)

func (e *HomeSize) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HomeSize(s)
	case string:
		*e = HomeSize(s)
	default:
		return fmt.Errorf("unsupported scan type for HomeSize: %T", src)
	}
	return nil
}

type NullHomeSize struct {
	HomeSize HomeSize
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHomeSize) Scan(value interface{}) error {
	if value == nil {
		ns.HomeSize, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HomeSize.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHomeSize) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.HomeSize, nil
}

type Admin struct {
	ID       int32  `json:"id"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

type Landlord struct {
	ID             int32  `json:"id"`
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	Phone          string `json:"phone"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

type Reservation struct {
	ID        int32     `json:"id"`
	TenantID  int32     `json:"tenant_id"`
	RoomID    int32     `json:"room_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Price     float64   `json:"price"`
	Total     float64   `json:"total"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Review struct {
	ID        int32     `json:"id"`
	UserID    int32     `json:"user_id"`
	RoomID    int32     `json:"room_id"`
	Comment   string    `json:"comment"`
	Rating    int32     `json:"rating"`
	CreatedAt time.Time `json:"created_at"`
}

type Room struct {
	ID                   int32     `json:"id"`
	OwnerID              int32     `json:"owner_id"`
	HomeType             []string  `json:"home_type"`
	HomeSize             HomeSize  `json:"home_size"`
	Furnished            bool      `json:"furnished"`
	PrivateBathroom      bool      `json:"private_bathroom"`
	Balcony              bool      `json:"balcony"`
	Garden               bool      `json:"garden"`
	Kitchen              bool      `json:"kitchen"`
	PetsAllowed          bool      `json:"pets_allowed"`
	Parking              bool      `json:"parking"`
	WheelchairAccessible bool      `json:"wheelchair_accessible"`
	Basement             bool      `json:"basement"`
	Amenities            []string  `json:"amenities"`
	SuitableFor          []string  `json:"suitable_for"`
	PublishedAt          time.Time `json:"published_at"`
	Price                float64   `json:"price"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
	Longitude            float64   `json:"longitude"`
	Latitude             float64   `json:"latitude"`
}

type RoomMedium struct {
	ID         int32  `json:"id"`
	RoomID     int32  `json:"room_id"`
	RoomImages string `json:"room_images"`
}

type Tenant struct {
	ID             int32  `json:"id"`
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	HashedPassword string `json:"hashed_password"`
}

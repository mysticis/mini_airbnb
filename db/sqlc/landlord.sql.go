// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: landlord.sql

package db

import (
	"context"
)

const createLandlord = `-- name: CreateLandlord :one
INSERT INTO landlord (
  first_name, last_name, email, phone, hashed_password
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, first_name, last_name, phone, email, hashed_password
`

type CreateLandlordParams struct {
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateLandlord(ctx context.Context, arg CreateLandlordParams) (Landlord, error) {
	row := q.db.QueryRowContext(ctx, createLandlord,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.HashedPassword,
	)
	var i Landlord
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getLandlord = `-- name: GetLandlord :one
SELECT id, first_name, last_name, phone, email, hashed_password FROM landlord
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetLandlord(ctx context.Context, email string) (Landlord, error) {
	row := q.db.QueryRowContext(ctx, getLandlord, email)
	var i Landlord
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const listLandlords = `-- name: ListLandlords :many
SELECT id, first_name, last_name, phone, email, hashed_password FROM landlord
ORDER BY first_name
`

func (q *Queries) ListLandlords(ctx context.Context) ([]Landlord, error) {
	rows, err := q.db.QueryContext(ctx, listLandlords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Landlord{}
	for rows.Next() {
		var i Landlord
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.Email,
			&i.HashedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
